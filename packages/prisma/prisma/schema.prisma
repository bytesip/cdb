generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bean {
  id                 String             @id @default(cuid())
  name               String
  description        String?
  originId           String             @map("origin_id")
  origin             Origin             @relation(fields: [originId], references: [id])
  roastLevelId       String             @map("roast_level_id")
  roastLevel         RoastLevel         @relation(fields: [roastLevelId], references: [id])
  processingMethodId String             @map("processing_method_id")
  processingMethod   ProcessingMethod   @relation(fields: [processingMethodId], references: [id])
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  beanFlavorProfile  BeanFlavorProfile?
  beanTastings       BeanTastings[]

  @@map("beans")
}

model Origin {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  longitude   Float?
  latitude    Float?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  beans       Bean[]

  @@map("origins")
}

model RoastLevel {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  beans       Bean[]

  @@map("roast_levels")
}

model ProcessingMethod {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  beans       Bean[]

  @@map("processing_methods")
}

// ref: https://notbadcoffee.com/flavor-wheel-en/
model FlavorProfile {
  id                 String              @id @default(cuid())
  value              String              @unique
  label              String
  description        String?
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  beanFlavorProfiles BeanFlavorProfile[]

  @@map("flavor_profiles")
}

model BeanFlavorProfile {
  id              String        @id @default(cuid())
  beanId          String        @unique @map("bean_id")
  bean            Bean          @relation(fields: [beanId], references: [id])
  flavorProfileId String        @map("flavor_profile_id")
  flavorProfile   FlavorProfile @relation(fields: [flavorProfileId], references: [id])
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("bean_flavor_profiles")
}

model Tasting {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String
  acidity      Int
  richness     Int
  conductedAt  DateTime       @map("conducted_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  beanTastings BeanTastings[]

  @@map("tastings")
}

model BeanTastings {
  tastingId String   @id @map("tasting_id")
  tasting   Tasting  @relation(fields: [tastingId], references: [id])
  beanId    String   @unique @map("bean_id")
  bean      Bean     @relation(fields: [beanId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("bean_tastings")
}

model Shop {
  id           String        @id @default(cuid())
  name         String        @unique
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  ShopLocation ShopLocation?

  @@map("shops")
}

model ShopLocation {
  id         String   @id @default(cuid())
  shopId     String   @unique @map("shop_id")
  shop       Shop     @relation(fields: [shopId], references: [id])
  longitude  Float?
  latitude   Float?
  postalCode String?  @map("postal_code")
  prefecture String?  @map("prefecture")
  city       String?  @map("city")
  address    String?  @map("address")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("shop_locations")
}

// 店舗
// 購入日
// 容量と価格

// 飲み方 種類
// 飲み方毎の説明
