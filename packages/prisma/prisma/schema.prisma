generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
  output        = "../.generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Package {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String?
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  beansPackages   BeansPackage[]
  packagePurchase PackagePurchase?

  @@map("packages")
}

model BeansPackage {
  id        String   @id @default(cuid())
  beanId    String   @map("bean_id")
  bean      Bean     @relation(fields: [beanId], references: [id])
  packageId String   @map("package_id")
  package   Package  @relation(fields: [packageId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("beans_packages")
}

model Bean {
  id                 String             @id @default(cuid())
  name               String
  description        String?
  originId           String?            @map("origin_id")
  origin             Origin?            @relation(fields: [originId], references: [id])
  roastLevelId       String?            @map("roast_level_id")
  roastLevel         RoastLevel?        @relation(fields: [roastLevelId], references: [id])
  processingMethodId String?            @map("processing_method_id")
  processingMethod   ProcessingMethod?  @relation(fields: [processingMethodId], references: [id])
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @updatedAt @map("updated_at")
  beanFlavorProfile  BeanFlavorProfile?
  beanTastings       BeanTastings[]
  beansPackages      BeansPackage[]

  @@map("beans")
}

model Origin {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  longitude   Float?
  latitude    Float?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  beans       Bean[]

  @@map("origins")
}

model RoastLevel {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  beans       Bean[]

  @@map("roast_levels")
}

model ProcessingMethod {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  beans       Bean[]

  @@map("processing_methods")
}

// ref: https://notbadcoffee.com/flavor-wheel-en/
model FlavorProfile {
  id                 String              @id @default(cuid())
  value              String              @unique
  label              String
  description        String?
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @updatedAt @map("updated_at")
  beanFlavorProfiles BeanFlavorProfile[]

  parents  FlavorProfileTree[] @relation("parent")
  children FlavorProfileTree[] @relation("child")

  @@map("flavor_profiles")
}

model FlavorProfileTree {
  id        String        @id @default(cuid())
  parentId  String        @map("parent_id")
  parent    FlavorProfile @relation("parent", fields: [parentId], references: [id])
  childId   String        @map("child_id")
  child     FlavorProfile @relation("child", fields: [childId], references: [id])
  createdAt DateTime      @default(now()) @map("created_at")
  updatedAt DateTime      @updatedAt @map("updated_at")

  @@map("flavor_profile_trees")
}

model BeanFlavorProfile {
  id              String        @id @default(cuid())
  beanId          String        @unique @map("bean_id")
  bean            Bean          @relation(fields: [beanId], references: [id])
  flavorProfileId String        @map("flavor_profile_id")
  flavorProfile   FlavorProfile @relation(fields: [flavorProfileId], references: [id])
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  @@map("bean_flavor_profiles")
}

model Tasting {
  id           String         @id @default(cuid())
  name         String         @unique
  description  String
  acidity      Int
  richness     Int
  conductedAt  DateTime       @map("conducted_at")
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  beanTastings BeanTastings[]

  @@map("tastings")
}

model BeanTastings {
  tastingId String   @id @map("tasting_id")
  tasting   Tasting  @relation(fields: [tastingId], references: [id])
  beanId    String   @unique @map("bean_id")
  bean      Bean     @relation(fields: [beanId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("bean_tastings")
}

model Shop {
  id              String           @id @default(cuid())
  name            String           @unique
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  shopLocation    ShopLocation?
  packagePurchase PackagePurchase?

  @@map("shops")
}

model ShopLocation {
  id         String   @id @default(cuid())
  shopId     String   @unique @map("shop_id")
  shop       Shop     @relation(fields: [shopId], references: [id])
  longitude  Float?
  latitude   Float?
  postalCode String?  @map("postal_code")
  prefecture String?
  city       String?
  address    String?
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("shop_locations")
}

model CofeeShop {
  id                String             @id @default(cuid())
  name              String             @unique
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  cofeeShopLocation CofeeShopLocation?

  @@map("cofee_shops")
}

model CofeeShopLocation {
  id          String    @id @default(cuid())
  cofeeShopId String    @unique @map("cofee_shop_id")
  cofeeShop   CofeeShop @relation(fields: [cofeeShopId], references: [id])
  longitude   Float?
  latitude    Float?
  postalCode  String?   @map("postal_code")
  prefecture  String?
  city        String?
  address     String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("cofee_shop_locations")
}

model PackagePurchase {
  id          String   @id @default(cuid())
  packageId   String   @unique @map("package_id")
  package     Package  @relation(fields: [packageId], references: [id])
  shopId      String   @unique @map("shop_id")
  shop        Shop     @relation(fields: [shopId], references: [id])
  price       Int
  capacity    Int
  purchasedAt DateTime @map("purchased_at")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  @@map("package_purchases")
}

// 飲み方 種類
// 飲み方毎の説明
